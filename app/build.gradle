apply plugin: "com.android.application"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    def currentVersionCode = getVersionCode()
    def currentVersionName = getVersionName()

    defaultConfig {
        applicationId "com.supet.react"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode currentVersionCode
        versionName currentVersionName

//        ndk {
//            abiFilters 'armeabi', 'x86'
//        }
    }

    sourceSets {

        instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        // delete unaligned files
        android.applicationVariants.all { variant ->
            variant.assemble.doLast {
                variant.outputs.each { output ->
                    File file = output.packageApplication.outputFile;
                    if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                        println "deleting " + file.getName()
                        file.delete()
                    }
                }

                updateVersionCode()
            }
        }
    }

    productFlavors {
        localhost {}
    }

}



def getVersionCode() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.number'].toInteger()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def getVersionName() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.versionName'].toString()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def updateVersionCode() {

    def runTasks = gradle.startParameter.taskNames

    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {
        return
    }

    def File versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def currentVersionCode = versionProps['build.number'].toInteger()
        currentVersionCode++
        versionProps['build.number'] = currentVersionCode.toString()
        versionProps.store(versionFile.newWriter(), null)
        println('Updated version code to ' + currentVersionCode.toString())
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}


dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile project(path: ':libreacthotfix')
    compile project(path: ':web')

    compile 'com.supets.lib:jsoneditlib:1.4.0'

    compile 'com.zhy:okhttputils:2.6.2'
}

